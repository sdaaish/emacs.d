#+TITLE: My GNU Emacs configuration
#+STARTUP: indent 
#+OPTIONS: H:5 num:nil tags:nil toc:3 timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing
* Todos
Things that needs to be done.
** TODO Change theme for linux when in console
- color-theme
** DONE windmove keys dont work
CLOSED: [2017-04-07 fre 11:32]
** DONE Troubleshoot
CLOSED: [2017-04-07 fre 11:32]
** DONE magit on some Windows-clients
CLOSED: [2017-04-07 fre 11:32]
** TODO Configure local variables and files
** TODO Emacsclient dont load theme and settings
* Introduction
This is my version of an configuration file for GNU Emacs. The config tries to load needed packages from start, but this doesnt work right out of the box for now. You need to start emacs 3 times before it loads without faults.
#+BEGIN_SRC emacs-lisp
(message "*** Reading from emacs.org ***")
#+END_SRC
* Config
** Initializing
*** Message-buffer
Increase message-buffer
#+BEGIN_SRC emacs-lisp
(setq message-log-max (* 256 1024))
#+END_SRC
** Package-archives
*** Package handling
Take care of packages needed to enhance emacs.
**** The "Use-package" is useful to load packages from archives more easily. But you need to load that before it is used, and you must ensure that it is installed before you call it.
*** Load packages from these archives.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system       'utf-8)
(add-to-list 'package-archives
	'("melpa-stable" .	"https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
	'("melpa" .		"https://melpa.org/packages/") t)
(add-to-list 'package-archives
	'("gnu"	.		"https://elpa.gnu.org/packages/") t)
#+END_SRC
*** Installation order, higher priority first
See http://endlessparentheses.com/new-in-emacs-25-1-archive-priorities-and-downgrading-packages.html
Works from version 25.1
#+BEGIN_SRC emacs-lisp
(setq package-archive-priorities
      (quote (("melpa-stable" . 10)
	      ("gnu" . 5)
	      ("melpa" . 1))))
;; If there is no package-archives, download them. If they exist, dont.
(unless (and (file-exists-p (concat user-emacs-directory "elpa/archives/gnu"))
             (file-exists-p (concat user-emacs-directory "elpa/archives/melpa"))
             (file-exists-p (concat user-emacs-directory "elpa/archives/melpa-stable")))
  (package-refresh-contents)
(message "*** Did refresh content. ***"))
#+END_SRC
** Use-package bootstrap
Ensure that use-package is installed, otherwise install it.
From http://www.lunaryorn.com/posts/my-emacs-configuration-with-use-package.html
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package))
#+END_SRC
If we set the variable use-package-always-ensure, we need to set :ensure to nil for packages that are already included in emacs. I prefer to set this variable since I dont install packages manually.
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
(setq use-package-always-defer 3)
(setq use-package-always-defer-install nil)
(setq use-package-verbose t)
#+END_SRC
** Local custom file fix
This setting avoids updates to local custom-file.
From https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/
#+BEGIN_SRC emacs-lisp
(defun package--save-selected-packages (&optional value)
  "Set and save `package-selected-packages' to VALUE."
  (when value
    (setq package-selected-packages value)))
#+END_SRC
** Version-dependent
Paradox and magit is depending on 24.4, so load only them if that emacs-version or later is installed.
+ Paradox is package mgmt
+ Magit is a Git-tool
#+BEGIN_SRC emacs-lisp
;; Emacs version above 24.4 needed for these apps
(if (version< emacs-version "24.4")
        (message "*** Emacs version is before 24.4 ***")
        (message "*** Emacs version is `%s' ***" (emacs-version))
        ;; Package handling trough paradox
        (use-package paradox
          :ensure t
          :defer t
          :init
          (setq paradox-github-token t))
        ;; Magit for GIT support
        (use-package magit
          :ensure t
          :bind ("C-x g" . magit-status))
        (setq-default with-editor-emacsclient-executable "emacsclient"))
#+END_SRC
Fix for magit when you get with-editor errors (emacsclient). From https://github.com/magit/magit/issues/2492
** Packages
These packages works with emacs 24.1 or later, or are not dependent on a specific version.
*** Powershell mode
Powershell-mode is useful.
Only in windows.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
(use-package powershell
  :ensure t
  :defer t))
#+END_SRC
*** Dos-mode
Only in windows.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
(use-package dos
  :ensure t
  :defer t
  :config
   (add-to-list 'auto-mode-alist '("\\.cmd\\'" . dos-mode))
   (add-to-list 'auto-mode-alist '("\\.bat\\'" . dos-mode))
))
#+END_SRC
*** Winner-mode
Winner for navigating between buffers (C-<left> or C-<right>)
#+BEGIN_SRC emacs-lisp
(use-package winner)
#+END_SRC
*** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands
    (markdown-mode gfm-mode)
  :mode
    (("README\\.md\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
  :init
    (setq markdown-command "multimarkdown")
  :config
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
#+END_SRC
*** Markdown preview mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-preview-mode)
#+END_SRC
*** Export markdown
#+BEGIN_SRC emacs-lisp
(use-package auto-org-md
:defer t)
#+END_SRC
*** Export GHF markdown
Github-flavoured markdown
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm)
#+END_SRC
*** Mediawiki
#+BEGIN_SRC emacs-lisp
(use-package mediawiki
  :pin melpa
  :config
   (setq mediawiki-site-alist
   (append
    '(("Charlottendal" "https://www.charlottendal.net/mwiki/" "username" "password" "Main Page"))
      mediawiki-site-alist)))
#+END_SRC
*** SSH-config
Add mode for configuring .ssh/config and other related to SSH.
#+BEGIN_SRC emacs-lisp
(use-package ssh-config-mode
:ensure t
:defer t
:config
 (add-to-list 'auto-mode-alist '("/\\.ssh/config\\'"     . ssh-config-mode))
 (add-to-list 'auto-mode-alist '("/sshd?_config\\'"      . ssh-config-mode))
 (add-to-list 'auto-mode-alist '("/known_hosts\\'"       . ssh-known-hosts-mode))
 (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-authorized-keys-mode))
 (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
)
#+END_SRC
*** Bind-key
Use the bind-key package (used by use-package).
#+BEGIN_SRC emacs-lisp
(use-package bind-key
  :ensure t
  :bind ("C-h B" . describe-personal-keybindings))
#+END_SRC
*** Git
Modes for editing git-files
**** gitconfig
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode
:config
(add-to-list 'auto-mode-alist '("/\\.gitconfig.local\\'" . gitconfig-mode)))
#+END_SRC
**** gitignore
Use this to get support for .gitignore-files
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode)
#+END_SRC
**** gitattributes
Edit gitattributes-files.
#+BEGIN_SRC emacs-lisp
(use-package gitattributes-mode)
#+END_SRC
*** line-numbers
Use relative linenumbers.
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :config
  (setq linum-relative-current-symbol ""))
#+END_SRC
Turn off line-numbers in minor mode.
#+BEGIN_SRC emacs-lisp
(use-package linum-off)
#+END_SRC
*** indentation
#+BEGIN_SRC emacs-lisp
(use-package auto-indent-mode
:config
(add-hook 'emacs-lisp-mode-hook 'auto-indent-mode)
(add-hook 'org-mode-hook 'auto-indent-mode))
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
    (which-key-mode))
#+END_SRC
*** Company-mode
Complete anything
#+BEGIN_SRC emacs-lisp
(use-package company
:config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
*** Autohotkey-mode
#+BEGIN_SRC emacs-lisp
(use-package ahk-mode)
#+END_SRC
*** Switch-window
Use visual keys to switch windows.
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :bind
    (("C-M-z" . switch-window)
    ("C-x o" . switch-window)))
#+END_SRC
*** Buffer-move
To move buffers around
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind
    (("C-c C-x <up>" . buf-move-up)
    ("C-c C-x <down>" . buf-move-down)
    ("C-c C-x <left>" . buf-move-left)
    ("C-c C-x <right>" . buf-move-right)))
#+END_SRC
*** Pretty bullets
Apparently performance-problems on Windows 10
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :disabled
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** wiki-summary
Use wiki search from emacs
#+BEGIN_SRC emacs-lisp
(use-package wiki-summary)
#+END_SRC
*** Super-save
Save buffers when idle
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+END_SRC
*** Yara-files
Mode that supports editing of Yara-files.
#+BEGIN_SRC emacs-lisp
(use-package yara-mode)
#+END_SRC
*** Window resize
#+BEGIN_SRC emacs-lisp
(use-package windresize)
#+END_SRC
*** Better shell
#+BEGIN_SRC emacs-lisp
(use-package better-shell
:ensure t
:bind (("C-'" . better-shell-shell)
("C-;" . better-shell-remote-open)))
#+END_SRC
*** Elastic search mode
#+BEGIN_SRC emacs-lisp
(use-package es-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.es$" . es-mode)))
#+END_SRC
*** Move text
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :config
  (move-text-default-bindings))
#+END_SRC
*** XKCD
#+BEGIN_SRC emacs-lisp
(use-package xkcd)
#+END_SRC
*** org2jekyll
To make it possible to write in org and publish as jekyll.
#+BEGIN_SRC emacs-lisp
(use-package org2jekyll)
#+END_SRC
*** Copy-as-format
#+BEGIN_SRC emacs-lisp
(use-package copy-as-format
:bind
  ("C-c w g" . copy-as-format-github))
#+END_SRC
** Hydra config
Hydras is keybord mapping through menus.
*** Hydra
#+BEGIN_SRC emacs-lisp
;; Hydra keymapping support
(use-package hydra
        :ensure t
        :defer t
        :config

(defhydra hydra-toggle (:color blue)
      "toggle"
      ("a" abbrev-mode "abbrev")
      ("b" describe-personal-keybindings "key-bindings")
      ("d" toggle-debug-on-error "debug")
      ("f" auto-fill-mode "fill")
      ("g" goto-line "goto-line")
      ("k" kill-some-buffers "kill-some b")
      ("m" message-recover "message-recover")
      ("l" linum-mode "linum")
      ("p" package-list-packages "package-list")
      ("r" linum-relative-mode "linum-relative")
      ("s" do-auto-save "auto-save")
      ("t" toggle-truncate-lines "truncate")
      ("v" windresize "windresize")
      ("w" whitespace-mode "whitespace")
      ("x" xkcd "xkcd")
      ("q" nil "cancel"))
   (bind-key "C-c v" 'hydra-toggle/body)

(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
 (setq text-scale-mode-step 1.1)

(defhydra hydra-launcher (:color blue)
   "Launch"
   ("h" man "man")
   ("b" better-shell-for-current-dir "better-shell")
   ("c" wiki-summary "wiki-summary")
   ("e" eshell "eshell")
   ("g" (browse-url "https://git-scm.com/docs/") "Git ref")
   ("p" (powershell) "powershell")
   ("r" (browse-url "http://www.reddit.com/r/emacs/") "reddit")
   ("w" (browse-url "http://www.emacswiki.org/") "emacswiki")
   ("s" shell "shell")
   ("q" nil "cancel"))
  (bind-key "C-c b" 'hydra-launcher/body)

;; From https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates
(defhydra hydra-org-template (:color blue :hint nil)
    "
 _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
 _l_atex   _E_xample   _p_erl          _i_ndex:
 _a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
 _s_rc     _n_ote      plant_u_ml      _H_TML:
 _h_tml    ^ ^         ^ ^             _A_SCII:
"
    ("s" (hot-expand "<s"))
    ("E" (hot-expand "<e"))
    ("q" (hot-expand "<q"))
    ("v" (hot-expand "<v"))
    ("n" (let (text) ; org-reveal speaker notes
           (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
             (delete-region (region-beginning) (region-end)))
           (insert "#+BEGIN_NOTES\n\n#+END_NOTES")
           (forward-line -1)
           (when text (insert text))))
    ("c" (hot-expand "<c"))
    ("l" (hot-expand "<l"))
    ("h" (hot-expand "<h"))
    ("a" (hot-expand "<a"))
    ("L" (hot-expand "<L"))
    ("i" (hot-expand "<i"))
    ("e" (hot-expand "<s" "emacs-lisp"))
    ("p" (hot-expand "<s" "perl"))
    ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
    ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
    ("I" (hot-expand "<I"))
    ("H" (hot-expand "<H"))
    ("A" (hot-expand "<A"))
    ("<" self-insert-command "ins")
    ("o" nil "quit"))

(defun hot-expand (str &optional mod header)
    "Expand org template.

STR is a structure template string recognised by org like <s. MOD is a
string with additional parameters to add the begin line of the
structure element. HEADER string includes more parameters that are
prepended to the element after the #+HEADERS: tag."
    (let (text)
      (when (region-active-p)
        (setq text (buffer-substring (region-beginning) (region-end)))
        (delete-region (region-beginning) (region-end))
        (deactivate-mark))
      (when header (insert "#+HEADERS: " header))
      (insert str)
      (org-try-structure-completion)
      (when mod (insert mod) (forward-line))
      (when text (insert text))))

      (define-key org-mode-map "<"
      (lambda () (interactive)
      (if (or (region-active-p) (looking-back "^"))
      (hydra-org-template/body)
      (self-insert-command 1))))
)

(bind-key "C-c o" 'hydra-org-template/body)

(defhydra hydra-move-text ()
  "Move text"
  ("u" move-text-up "up")
  ("d" move-text-down "down"))
#+END_SRC

#+RESULTS:
: hydra-org-template/body

* Private and local stuff
** Load private stuff
This load a local file with private info.
Must check for OS-version to find out where Dropbox is located.
Also must check for existing file, sometimes the system dont have Dropbox.
See also: http://dotemacs.de/multiemacs.html
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
 (setq my/dropbox-dir "~/Dropbox/"))
(if (eq system-type 'windows-nt)
  (setq my/dropbox-dir (concat (getenv "UserProfile") "\\Dropbox\\")))
(setq my-emacs-dir (concat my/dropbox-dir "emacs/"))
(if (file-exists-p (expand-file-name "private.org" my-emacs-dir))
 (org-babel-load-file (expand-file-name "private.org" my-emacs-dir)))
#+END_SRC
** Load secret stuff
Load secret stuff from this encrypted org-file.
*** EasyPG
Since we use "use-package" to load builtin function, add ":ensure nil".
#+BEGIN_SRC emacs-lisp
(use-package epa-file
  :ensure nil
  :config
  (setq epa-file-select-keys nil)
  (setq epa-file-encrypt-to "8A114B0F26AA73E8")
  (setq epa-file-cache-passphrase-for-symmetric-encryption t))
#+END_SRC
*** Org-crypt
enable encryption of org-files.
#+BEGIN_SRC emacs-lisp
(use-package org-crypt
  :ensure nil
  :config
  (org-crypt-use-before-save-magic)
  (setq org-crypt-tag-matcher "encrypt")
  (add-to-list 'org-tags-exclude-from-inheritance (quote "encrypt"))
  (add-to-list 'org-tags-exclude-from-inheritance (quote "crypt")))
#+END_SRC
*** Load secrets from this file
This part dont work yet.
#+BEGIN_SRC emacs-lisp
;;(if (file-exists-p (expand-file-name "secret.org.gpg" my-emacs-dir))
;; (org-babel-load-in-session-maybe (expand-file-name "secret.org.gpg" my-emacs-dir)))
#+END_SRC
*** Authinfo file
Define path for .authinfo-file
#+BEGIN_SRC emacs-lisp
(setq auth-source-debug t)
(setq auth-sources
    (concat my/dropbox-dir "emacs/.authinfo.gpg"))
#+END_SRC
** Custom file for customize
Use a separate file for emacs "customize".
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "customize.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC
** Lisp
My own Lisp-files
#+BEGIN_SRC emacs-lisp
;; Local lisp-directory
(when (not (file-exists-p "lisp"))
      (make-directory (concat user-emacs-directory "lisp") t))
(add-to-list 'load-path (concat user-emacs-directory "lisp"))
#+END_SRC
* Tuning
** Garbage collection
Tries to change the variable dynamic.
From https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
#+BEGIN_SRC emacs-lisp
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold (* 500 1024 1024)))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold (* 5 1024 1024)))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+END_SRC
** File encoding settings
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment   'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; MS Windows clipboard is UTF-16LE
(when (eq system-type 'windows-nt)
  (set-clipboard-coding-system 'utf-16le-dos))
#+END_SRC
** Sentence
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
* Keyboard settings
** Windows keys (W32)
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
     (w32-register-hot-key [M-tab])
     (setq w32-capslock-is-shiftlock nil)
     (setq w32-enable-caps-lock nil))
#+END_SRC
** Set-mark for lxss
Set mark-command for Windows env
#+BEGIN_SRC emacs-lisp
(bind-key "M-SPC" 'set-mark-command)
#+END_SRC
** Buffer Selection
#+BEGIN_SRC emacs-lisp
(use-package bs
:ensure nil
:config
(bind-key "C-x C-b" 'bs-show))
#+END_SRC
** Interactively Do Things
https://www.emacswiki.org/emacs/InteractivelyDoThings
#+BEGIN_SRC emacs-lisp
(use-package ido
:config
  (ido-mode t)
  (ido-everywhere t)
  (setq-default ido-case-fold t))
#+END_SRC
** Ido everywhere
ido-completeing-read+ has replaced ido-ubiquitous-mode.
#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
:config
  (ido-ubiquitous-mode 1))
#+END_SRC
** Windmove
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
(windmove-default-keybindings))
#+END_SRC
*** Orgmode customizations
Make windmove work in org-mode:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
(setq org-support-shift-select t)
#+END_SRC
** Own stuff
*** Toggle truncate lines
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines nil)
(setq truncate-partial-width-windows 40)
(bind-key "C-c t" 'toggle-truncate-lines)
#+END_SRC
*** Wrap long lines
Visual-line-mode affects the variable word-wrap (toggle-word-wrap).
#+BEGIN_SRC emacs-lisp
(set-default 'word-wrap t)
(setq-default visual-line-mode t)
#+END_SRC
*** No case-sensitive for search
#+BEGIN_SRC emacs-lisp
(setq-default case-fold-search t)
#+END_SRC
*** Turn off case sensitivity för buffers
#+BEGIN_SRC emacs-lisp
(setq read-buffer-completion-ignore-case t)
#+END_SRC

#+RESULTS:
: t

** Find init-files
Keyboard shortcut to find emacs.org, init.el and my custom-file.
#+BEGIN_SRC emacs-lisp
(bind-key "C-c c"
  (lambda ()
  "Open my custom file"
    (interactive)
      (find-file custom-file)))
(bind-key "C-c e"
  (lambda ()
    "Open my org init file"
    (interactive)
      (find-file my/init-org-file)))
(bind-key "C-c i"
  (lambda ()
  "Open my init-file"
  (interactive)
      (find-file user-init-file)))
(bind-key "C-c r"
  (lambda ()
    "Load my org-init-file"
    (interactive)
      (org-babel-load-file my/init-org-file)))
#+END_SRC
* Theme and settings
** Theme
*** Load themes
#+BEGIN_SRC emacs-lisp
(defun my/load-themes ()
 "Loads my themes if in windows"

  (use-package afternoon-theme)
  (load-theme 'afternoon t t)

  (use-package base16-theme)
  (load-theme 'base16 t t)

  (use-package inkpot-theme)
  (load-theme 'inkpot t t)

  (use-package material-theme)
  (load-theme 'material t t)

  (use-package twilight-bright-theme)
  (load-theme 'twilight-bright t t)

  (use-package zenburn-theme)
  (load-theme 'zenburn t t)

  (load-theme 'material))
#+END_SRC
***  Load different theme if in gui or terminal
#+BEGIN_SRC emacs-lisp
(unless (not (display-graphic-p))
(load-theme 'tango-dark)
(my/load-themes))
#+END_SRC
*** Theme when emacs run as daemon.
This loads theme when emacs starts up as a daemon
#+BEGIN_SRC emacs-lisp
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (my/load-themes)))
#+END_SRC
*** Theme-chooser
Switch betweens selected themes with "C-<".
#+BEGIN_SRC emacs-lisp
(use-package theme-looper
  :config
  (theme-looper-set-theme-set '(afternoon inkpot twilight-bright tango-dark zenburn material))
  :bind
  ("C-<" . theme-looper-enable-next-theme)
  ("C->" . theme-looper-enable-random-theme))
#+END_SRC
** Fonts
Use Source Code Pro as font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                        :family "Source Code Pro"
                        :height 100
                        :weight 'normal
                        :width  'condensed)
#+END_SRC

** Startup settings
Things that we dont want during or after startup
#+BEGIN_SRC emacs-lisp
;; Startup settings
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      initial-scratch-message nil
      initial-major-mode 'org-mode)

;; No menubar, toolbar or scrollbar
(defun my/no-toolbars ()
  "Dont load toolbars or menubars, if in gui-mode"
  (when (display-graphic-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (set-scroll-bar-mode nil)))
  
;; Load this when started as server (daemon)
(add-hook 'after-make-frame-functions
  (lambda (frame)
  (select-frame frame)
  (my/no-toolbars)))

;; Don't display toolbars when in gui-mode
(when (display-graphic-p)
  (my/no-toolbars))
#+END_SRC
** Powerline-mode
Use powerline in the message bar.
#+BEGIN_SRC emacs-lisp
(use-package powerline)
(powerline-default-theme)
#+END_SRC
** Buffer setup
*** Unique buffernames with uniquify
#+BEGIN_SRC emacs-lisp
(use-package uniquify
:ensure nil)
#+END_SRC
** No beeps
#+BEGIN_SRC emacs-lisp
;;No beep
(setq visible-bell t)
#+END_SRC
** Customisations
*** Initial settings
#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'text-mode)
(line-number-mode t)
(column-number-mode t)
(transient-mark-mode t)
(show-paren-mode 1)
(setq-default line-spacing 1)
#+END_SRC
*** Indents and tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default tab-always-indent 'complete)      ;;Use tabs as indents, 2ch width
#+END_SRC
*** Newline settings
#+BEGIN_SRC emacs-lisp
(setq mode-require-final-newline t)
(setq next-line-add-newlines nil)
(setq require-final-newline t)
#+END_SRC
*** Global highlight mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

#+RESULTS:
: t
*** Recent files
Record old openen files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key (kbd "C-c C-r") 'recentf-open-files)
#+END_SRC
*** Reverting
Map <F5> to revert-buffer. But only revert if the file is not modified.
#+BEGIN_SRC emacs-lisp
(global-set-key
  (kbd "<f5>")
  (lambda (&optional force-reverting)
  "Interactive call to revert-buffer. Ignoring the auto-save
  file and not requesting for confirmation. When the current buffer
  is modified, the command refuses to revert it, unless you specify
  the optional argument: force-reverting to true."
  (interactive "P")
  ;;(message "force-reverting value is %s" force-reverting)
  (if (or force-reverting (not (buffer-modified-p)))
  (revert-buffer :ignore-auto :noconfirm)
  (error "The buffer has been modified"))))
#+END_SRC
*** Bookmarks
Save bookmarks all the time.
#+BEGIN_SRC emacs-lisp
(setq bookmark-save-flag t)
(setq bookmark-version-control t)
(setq bookmark-default-file (concat my/dropbox-dir "emacs/bookmarks"))
#+END_SRC
*** Language
Spellchecking. I use Hunspell.
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure nil
  :config
  (progn
    (add-to-list 'ispell-local-dictionary-alist '("swedish-hunspell"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "sv_SE"); Dictionary file name
                                              nil
                                              iso-8859-1))

    (add-to-list 'ispell-local-dictionary-alist '("english-hunspell"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "en_US")
                                              nil
                                              iso-8859-1))
  (setq ispell-program-name "hunspell"
        ispell-dictionary "swedish-hunspell")))
#+END_SRC
*** Dired customizations
Use dired+ to not generate more buffers.
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :config
  (diredp-toggle-find-file-reuse-dir 1))
#+END_SRC
** Change yes-or-no to y-n
#+BEGIN_SRC emacs-lisp
;; Press y or n for yes or no
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Eshell
Use axtended shell.
#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "cat")
(bind-key "C-c RET" 'eshell)
#+END_SRC
Use eshell built in functions for sudo. See [[https://emacs.stackexchange.com/questions/5608/how-to-let-eshell-remember-sudo-password-for-two-minutes][this discussion]] for details.
#+BEGIN_SRC emacs-lisp
(require 'em-tramp) ; to load eshell’s sudo
(setq eshell-prefer-lisp-functions t)
(setq eshell-prefer-lisp-variables t)
(setq password-cache t) ; enable password caching
(setq password-cache-expiry 3600) ; for one hour (time in secs)
#+END_SRC
** Org-mode stuff
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
 (setq my/repo-dir "~/repos/"))
(if (eq system-type 'windows-nt)
  (setq my/repo-dir (concat (getenv "UserProfile") "\\Repos\\")))
(setq org-publish-project-alist
      '(("OL-event"
         :base-directory (concat my/repodir "OL-Event")
         :publishing-directory (concat my/repodir "OL-Event")
         :publishing-function org-md-export-to-markdown
         :with-sub-superscript nil
         )))
#+END_SRC
* Backup
Backup and autosave options, + history
** Backup of files
Saves backup of files in emacs-homedir. Keeps several versions of the files.
#+BEGIN_SRC emacs-lisp
;; From https://github.com/magnars/.emacs.d
;; Write backup files to own directory
(defconst my/emacs-backup-dir
        (expand-file-name (concat user-emacs-directory "backups/")))
(setq backup-directory-alist
      `((".*" . ,my/emacs-backup-dir)))

;; Make backups of files, even when they're in version control
(setq
        delete-old-versions t
        version-control t
        vc-make-backup-files t
        backup-by-copying t
        kept-old-versions 10
        kept-new-versions 20
        auto-save-interval 50)
#+END_SRC
** Save current position
Go back to where you last were in the file.
#+BEGIN_SRC emacs-lisp
;; Save point position between sessions
(use-package saveplace
:config
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory)))
#+END_SRC
** Save history
Save a history of edited files.
#+BEGIN_SRC emacs-lisp
;; Save history of files
(setq savehist-file (expand-file-name ".savehist" user-emacs-directory))
(savehist-mode 1)
(setq
  history-length t
  history-delete-duplicates t
  savehist-save-minibuffer-history 1
  savehist-additional-variables
  '(kill-ring
  search-ring
  regexp-search-ring))
#+END_SRC

* Agenda-files
** Org-files
My org-files for Todo-list and agenda.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
(setq org-directory (concat my/dropbox-dir "emacs/org/"))
(setq org-agenda-files (list org-directory))
(bind-key "\C-c l" 'org-store-link)
(bind-key "\C-c a" 'org-agenda)
(setq org-log-done t)
(setq org-default-notes-file (concat org-directory "notes.org"))
#+END_SRC
** Localized calender
Use swedish calendar, from [[http://bigwalter.net/daniel/elisp/sv-kalender.el][Sv-kalender]]
#+BEGIN_SRC emacs-lisp
(load "sv-kalender" noerror)
#+END_SRC

** Org-Mobile
This copys files to Dropbox dir where the MobileOrg app can read/write data.
#+BEGIN_SRC emacs-lisp
(use-package org-mobile
  :ensure nil
  :init
  (progn
    (autoload 'org-mobile-pull "org-mobile" nil t)
    (autoload 'org-mobile-push "org-mobile" nil t))
  :config
  (progn
    (setq org-mobile-directory (concat my/dropbox-dir "Appar/MobileOrg/"))
    (setq org-mobile-inbox-for-pull (concat my/dropbox-dir "emacs/org/sync.org"))
    (setq default-buffer-file-coding-system 'utf-8)
    (setq org-mobile-files (concat my/dropbox-dir "emacs/org/"))
    (setq org-mobile-agendas '("all"))))
#+END_SRC

#+RESULTS:
: t

* Links
** Manuals
+ http://orgmode.org/manual/ Org mode manual
+ https://www.emacswiki.org/emacs/LoadPath
+ https://www.gnu.org/software/emacs/manual/html_node/
*** Magit manual
+ https://www.emacswiki.org/emacs/Magit
+ https://magit.vc/manual/magit/Getting-started.html
*** Use-package
+ https://github.com/jwiegley/use-package
** Generell info
+ http://dotemacs.de/
+ http://ergoemacs.org/
+ http://pragmaticemacs.com/
+ http://endlessparentheses.com/
** Böcker
- [[https://www.masteringemacs.org/][Mastering emacs]]
** Examples
+ https://github.com/eschulte/emacs24-starter-kit.
+ https://github.com/credmp/emacs-config 
+ https://gitlab.com/buildfunthings/emacs-config.
+ https://github.com/magnars/.emacs.d
+ https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
+ http://pages.sachachua.com/.emacs.d/Sacha.html#org8fde6ab
+ https://coldnew.github.io/coldnew-emacs/init.el.html
+ http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html
+ http://ergoemacs.org/emacs/emacs_installing_packages.html
+ https://github.com/howardabrams/dot-files/blob/master/emacs.org
+ http://whattheemacsd.com/
+ https://github.com/technomancy/better-defaults
+ http://wenshanren.org/?p=334 Org-mode example
+ https://ogbe.net/emacsconfig.html Another emacs org-mode example
+ http://dotemacs.de/multiemacs.html How to separate config on different systems
+ https://www.emacswiki.org/emacs/RobertAdesamConfig
+ [[https://caolan.org/dotfiles/emacs.html]]
+ https://mrblog.nl/emacs/config.html
+ http://bnbeckwith.com/bnb-emacs/
** Information
+ https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
+ http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
** Performance
+ https://emacs.stackexchange.com/questions/2286/what-can-i-do-to-speed-up-my-start-up
** Videos
+ https://youtu.be/I28jFkpN5Zk
  
* The end
Just record a last message, to know that the whole file has been loaded.
#+BEGIN_SRC emacs-lisp
(message "*** This is the last line of the config. Startup time=%s ***" (emacs-init-time))
#+END_SRC

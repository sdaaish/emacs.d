#+TITLE: My GNU Emacs configuration
#+STARTUP: indent 
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing
* TODO Change theme for linux in console
* TODO Troubleshoot
** TODO magit on some Windows-clients
** TODO windove keys dont work
* Introduction
This is my version of an configuration file for GNU Emacs. The config tries to load needed packages from start, but this doesnt work right out of the box for now. You need to start emacs 3 times before it loads without faults.
#+BEGIN_SRC emacs-lisp
(message "Reading from emacs.org")
#+END_SRC
* Package handling
Take care of packages needed to enhance emacs.
+ The "Use-package" is useful to load packages from archives more easily. But you need to load that before it is used, and you must ensure that it is installed before you call it.
** Package-archives
Load packages from these archives.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
;;(setq package-archives nil)
;;(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	'("melpa-stable" .	"https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
	'("melpa" .		"https://melpa.org/packages/") t)
(add-to-list 'package-archives
	'("gnu"	.		"https://elpa.gnu.org/packages/") t)
#+END_SRC
*** Installation order, higher priority first
See http://endlessparentheses.com/new-in-emacs-25-1-archive-priorities-and-downgrading-packages.html
Works from version 25.1
#+BEGIN_SRC emacs-lisp
(setq package-archive-priorities
      (quote (("melpa-stable" . 10)
	      ("gnu" . 5)
	      ("melpa" . 1))))
;; If there is no package-archives, download them. If they exist, dont.
;;(package-initialize)
(unless (and (file-exists-p (concat user-emacs-directory "elpa/archives/gnu"))
             (file-exists-p (concat user-emacs-directory "elpa/archives/melpa"))
             (file-exists-p (concat user-emacs-directory "elpa/archives/melpa-stable")))
  (package-refresh-contents)
(message "Did refresh content"))
#+END_SRC
** Use-package bootstrap
Ensure that use-package is installed, otherwise install it.
From http://www.lunaryorn.com/posts/my-emacs-configuration-with-use-package.html
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC
** Local custom file
This setting avoids updates to local custom-file.
From https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/
#+BEGIN_SRC emacs-lisp
(defun package--save-selected-packages (&optional value)
  "Set and save `package-selected-packages' to VALUE."
  (when value
    (setq package-selected-packages value)))
#+END_SRC
** Version-dependent
Paradox and magit is depending on 24.4, so load only them if that emacs-version or later is installed.
+ Paradox is package mgmt
+ Magit is a Git-tool
#+BEGIN_SRC emacs-lisp
;; Emacs version above 24.4 needed for these apps
(if (version< emacs-version "24.4")
        (message "Emacs version is before 24.4")
        (message "Emacs version is `%s'" (emacs-version))
        ;; Package handling trough paradox
        (use-package paradox
          :ensure t
          :defer t
          :init
          (setq paradox-github-token t))
        ;; Magit for GIT support
        (use-package magit
          :ensure t
          :bind ("C-x g" . magit-status))
        (setq-default with-editor-emacsclient-executable "emacsclient"))
#+END_SRC
Fix for magit when you get with-editor errors (emacsclient). From https://github.com/magit/magit/issues/2492
** Non-version dependent
These packages works with emacs 24.1 or later, or are not dependent on a specific version.
+ Powershell-mode is useful.
+ Winner for navigating between buffers (C-<left> or C-<right>)
*** Powershell mode
Only in windows.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
(use-package powershell
  :ensure t
  :defer t))
#+END_SRC
*** Winner-mode
#+BEGIN_SRC emacs-lisp
(require 'winner)
#+END_SRC
*** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
 :ensure t
 :defer t)
#+END_SRC
*** Mediawiki
#+BEGIN_SRC emacs-lisp
(use-package mediawiki
 :ensure t
 :defer t)
#+END_SRC
** Package config
*** Hydra
#+BEGIN_SRC emacs-lisp
;; Hydra keymapping support
(use-package hydra
        :ensure t
        :defer t
        :config
        (defhydra hydra-toggle (:color blue)
      "toggle"
      ("a" abbrev-mode "abbrev")
      ("d" toggle-debug-on-error "debug")
      ("f" auto-fill-mode "fill")
      ("t" toggle-truncate-lines "truncate")
      ("w" whitespace-mode "whitespace")
      ("q" nil "cancel"))
    (global-set-key (kbd "C-c C-v") 'hydra-toggle/body))
#+END_SRC
* Private and local stuff
** Load private stuff
This load a local file with private info.
Must check for OS-version to find out where Dropbox is located.
Also must check for existing file, sometimes the system dont have Dropbox.
See also: http://dotemacs.de/multiemacs.html
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
 (setq dropbox-dir "~/Dropbox/org/") 
  (setq dropbox-dir (concat (getenv "UserProfile") "/Dropbox/org/")))
(if (file-exists-p (expand-file-name "private.org" dropbox-dir))
 (org-babel-load-file (expand-file-name "private.org" dropbox-dir)))
#+END_SRC
** Custom file for customize
Use a separate file for emacs "customize".
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "customize.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC
* Lisp
My own Lisp-files
#+BEGIN_SRC emacs-lisp
;; Local lisp-directory
(when (not (file-exists-p "lisp"))
      (make-directory (concat user-emacs-directory "lisp") t))
(add-to-list 'load-path (concat user-emacs-directory "lisp"))
#+END_SRC
* Tuning
** Garbage collection
Tries to change the variable dynamic.
From https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
#+BEGIN_SRC emacs-lisp
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold 2000000))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+END_SRC
* Keyboard settings
** Windows keys (W32)
#+BEGIN_SRC emacs-lisp
(w32-register-hot-key [M-tab])
(setq w32-capslock-is-shiftlock nil)
(setq w32-enable-caps-lock nil)
#+END_SRC
** TODO Set-mark for lxss
Set mark-command for Windows env
#+BEGIN_SRC emacs-lisp
(bind-key "M-SPC" 'set-mark-command)
#+END_SRC
** Buffer Selection
#+BEGIN_SRC emacs-lisp
(require 'bs)
(global-set-key (kbd "C-x C-b") 'bs-show)
#+END_SRC
** Interactively Do Things
https://www.emacswiki.org/emacs/InteractivelyDoThings
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC
** Windmove
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
(windmove-default-keybindings))
#+END_SRC
** Orgmode customizations
Make windmove work in org-mode:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
(setq org-support-shift-select t)
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
;;Load theme
(load-theme 'deeper-blue)

;; Startup settings
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      initial-scratch-message nil
      initial-major-mode 'org-mode)

;; No menubar or toolbar
(menu-bar-mode -1)
;; Only try this when in gui-mode (tool-bar exists)
(if (functionp 'tool-bar-mode)
 (tool-bar-mode -1))
#+END_SRC
** Buffer setup
*** Unique buffernames with uniquify
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
#+END_SRC
** No beeps
#+BEGIN_SRC emacs-lisp
;;No beep
(setq visible-bell t)
#+END_SRC
** Customisations
*** Initial settings
#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'text-mode)
(line-number-mode t)
(column-number-mode t)
(transient-mark-mode t)
(show-paren-mode 1)
(setq-default line-spacing 1)
#+END_SRC
*** Indents and tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq-default tab-always-indent 'complete)      ;;Use tabs as indents, 2ch width
#+END_SRC
*** Newline settings
#+BEGIN_SRC emacs-lisp
(setq mode-require-final-newline t)
(setq next-line-add-newlines nil)
(setq require-final-newline t)
#+END_SRC
** Change yes-or-no to y-n
#+BEGIN_SRC emacs-lisp
;; Press y or n for yes or no
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Backup
Backup and autosave options, + history
** Backup of files
Saves backup of files in emacs-homedir. Keeps several versions of the files.
#+BEGIN_SRC emacs-lisp
;; From https://github.com/magnars/.emacs.d
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
#+END_SRC
** Save current position
Go back to where you last were in the file.
#+BEGIN_SRC emacs-lisp
;; Save point position between sessions
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+END_SRC
** Save history
Save a history of edited files.
#+BEGIN_SRC emacs-lisp
;; Save history of files
(setq savehist-file (expand-file-name ".savehist" user-emacs-directory))
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

#+END_SRC

* Agenda-files
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
(setq org-agenda-files '("~/Dropbox/org/"))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
#+END_SRC
* Links
** Manuals
+ http://orgmode.org/manual/ Org mode manual
+ https://www.emacswiki.org/emacs/LoadPath
+ https://www.gnu.org/software/emacs/manual/html_node/
*** Magit manual
+ https://www.emacswiki.org/emacs/Magit
+ https://magit.vc/manual/magit/Getting-started.html
*** Use-package
+ https://github.com/jwiegley/use-package
** Generel info
+ http://dotemacs.de/
+ http://ergoemacs.org/
** Examples
+ https://github.com/eschulte/emacs24-starter-kit.
+ https://github.com/credmp/emacs-config 
+ https://gitlab.com/buildfunthings/emacs-config.
+ https://github.com/magnars/.emacs.d
+ https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
+ http://pages.sachachua.com/.emacs.d/Sacha.html#org8fde6ab
+ https://coldnew.github.io/coldnew-emacs/init.el.html
+ http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html
+ http://ergoemacs.org/emacs/emacs_installing_packages.html
+ https://github.com/howardabrams/dot-files/blob/master/emacs.org
+ http://whattheemacsd.com/
+ https://github.com/technomancy/better-defaults
+ http://wenshanren.org/?p=334 Org-mode example
+ https://ogbe.net/emacsconfig.html Another emacs org-mode example
+ http://dotemacs.de/multiemacs.html How to separate config on different systems
** Information
+ https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
+ http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
** Performance
+ https://emacs.stackexchange.com/questions/2286/what-can-i-do-to-speed-up-my-start-up
** Videos
+ https://youtu.be/I28jFkpN5Zk

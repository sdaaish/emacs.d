#+TITLE: My GNU Emacs configuration
#+STARTUP: indent 
#+OPTIONS: H:5 num:nil tags:nil toc:3 timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing
* Todos
Things that needs to be done.
** TODO Sort this file!
This file is not very structured or descriptive either...
Someday I need to fix this.
** DONE Change theme for linux when in console
CLOSED: [2017-08-21 mån 16:25]
- color-theme
** DONE windmove keys dont work
CLOSED: [2017-04-07 fre 11:32]
** DONE Troubleshoot
CLOSED: [2017-04-07 fre 11:32]
** DONE magit on some Windows-clients
CLOSED: [2017-04-07 fre 11:32]
** TODO Configure local variables and files
** DONE Emacsclient dont load theme and settings
CLOSED: [2017-08-21 mån 16:25]
* Introduction
This is my version of an configuration file for GNU Emacs. The config tries to load needed packages from start, but this doesnt work right out of the box for now. You need to start emacs 3 times before it loads without faults.
#+BEGIN_SRC emacs-lisp
(message "*** Reading from emacs.org ***")
#+END_SRC
* Config
** Initializing
*** Message-buffer
Increase message-buffer
#+BEGIN_SRC emacs-lisp
(setq message-log-max (* 256 1024))
#+END_SRC
** Package-archives
*** Load packages from these archives.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(add-to-list 'package-archives
  '("melpa-stable" .	"https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
  '("melpa" .		"https://melpa.org/packages/") t)
(add-to-list 'package-archives
  '("gnu"	.		"https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives
  '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
*** Installation order, higher priority first
See http://endlessparentheses.com/new-in-emacs-25-1-archive-priorities-and-downgrading-packages.html
Works from version 25.1
#+BEGIN_SRC emacs-lisp
  (setq package-archive-priorities
            (quote (("melpa-stable" . 1)
              ("gnu" . 5)
              ("melpa" . 10)
              ("org" . 15))))
      ;; If there is no package-archives, download them. If they exist, dont.
      (unless (and (file-exists-p (concat user-emacs-directory "elpa/archives/gnu"))
                   (file-exists-p (concat user-emacs-directory "elpa/archives/melpa"))
                   (file-exists-p (concat user-emacs-directory "elpa/archives/melpa-stable"))
                   (file-exists-p (concat user-emacs-directory "elpa/archives/org")))
        (package-refresh-contents)
      (message "*** Did refresh content. ***"))
#+END_SRC
** Package bootstrap
Ensure that *use-package* and *orgmode* is installed, otherwise install it.
From http://www.lunaryorn.com/posts/my-emacs-configuration-with-use-package.html
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)         
  (unless (package-installed-p 'org)
    (package-install 'org)))
#+END_SRC
*** Use-package default settings
If we set the variable use-package-always-ensure, we need to set :ensure to nil for packages that are already included in emacs. I prefer to set this variable since I dont install packages manually.
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
(setq use-package-always-defer 3)
(setq use-package-always-defer-install nil)
(setq use-package-verbose t)
#+END_SRC
** Local custom file fix
This setting avoids updates to local custom-file.
From https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/
#+BEGIN_SRC emacs-lisp
;;(defun package--save-selected-packages (&optional value)
;;  "Set and save `package-selected-packages' to VALUE."
;;  (when value
;;    (setq package-selected-packages value)))
#+END_SRC
** Version-dependent
*** Magit
Magit is depending on 24.4, so load only them if that emacs-version or later is installed.
+ Magit is a Git-tool
#+BEGIN_SRC emacs-lisp
  ;; Emacs version above 24.4 needed for these apps
  (if (version< emacs-version "24.4")
      (message "*** Emacs version is before 24.4 ***")
    (message "*** Emacs version is `%s' ***" (emacs-version))
    ;; Magit for GIT support
    (use-package magit
      :pin melpa
      :ensure t
      :config
      (setq magit-completing-read-function 'ivy-completing-read)
      :bind ("C-x g" . magit-status))
    (use-package magit-filenotify)
    (setq-default with-editor-emacsclient-executable "emacsclient"))
#+END_SRC
Fix for magit when you get with-editor errors (emacsclient). From https://github.com/magit/magit/issues/2492
** Packages
These packages works with emacs 24.1 or later, or are not dependent on a specific version.
*** Powershell mode
Powershell-mode is useful.
Only in windows.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
(use-package powershell
  :pin melpa
  :ensure t
  :defer t))
#+END_SRC
*** Dos-mode
Only in windows.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
  (use-package bat-mode
    :ensure nil)
)
#+END_SRC
*** Winner-mode
Winner for navigating between buffers (C-<left> or C-<right>)
#+BEGIN_SRC emacs-lisp
(use-package winner)
#+END_SRC
*** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands
    (markdown-mode gfm-mode)
  :mode
    (("README\\.md\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
  :init
    (setq markdown-command "multimarkdown")
  :config
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
#+END_SRC
*** Markdown preview mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-preview-mode)
#+END_SRC
*** Export markdown
#+BEGIN_SRC emacs-lisp
(use-package auto-org-md
:defer t)
#+END_SRC
*** Export GHF markdown
Github-flavoured markdown
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm)
(eval-after-load "org"
  '(require 'ox-gfm nil t))
#+END_SRC
*** Export Jira
Export org as Jira.
#+BEGIN_SRC emacs-lisp
(use-package ox-jira)
(eval-after-load "org"
  '(require 'ox-jira nil t))
#+END_SRC
*** Mediawiki
#+BEGIN_SRC emacs-lisp
(use-package mediawiki
  :pin melpa
  :config
   (setq mediawiki-site-alist
   (append
    '(("Charlottendal" "https://www.charlottendal.net/mwiki/" "username" "password" "Main Page"))
      mediawiki-site-alist)))
#+END_SRC
*** ox-reveal
For presentations from org-mode. [[https://github.com/yjwen/org-reveal][Homepage]]
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:config
(setq org-reveal-root "file:///~/repos/reveal.js"))
#+END_SRC
*** SSH-config
Add mode for configuring .ssh/config and other related to SSH.
#+BEGIN_SRC emacs-lisp
(use-package ssh-config-mode
:ensure t
:defer t
:config
 (add-to-list 'auto-mode-alist '("/\\.ssh/config\\'"     . ssh-config-mode))
 (add-to-list 'auto-mode-alist '("/sshd?_config\\'"      . ssh-config-mode))
 (add-to-list 'auto-mode-alist '("/known_hosts\\'"       . ssh-known-hosts-mode))
 (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-authorized-keys-mode))
 (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
)
#+END_SRC
*** Bind-key
Use the bind-key package (used by use-package).
#+BEGIN_SRC emacs-lisp
(use-package bind-key
  :ensure t
  :bind ("C-h B" . describe-personal-keybindings))
#+END_SRC
*** Magit-gitflow
Enable support for git-flow. Why? See https://jeffkreeftmeijer.com/git-flow/.
#+BEGIN_SRC emacs-lisp
(use-package magit-gitflow
  :hook
  (magit-mode . turn-on-magit-gitflow))
#+END_SRC
*** magit-find-file
Package to support *git ls-files*.
#+BEGIN_SRC emacs-lisp
(use-package magit-find-file
    :bind ("C-c p" . magit-find-file-completing-read))
#+END_SRC
*** Git
Modes for editing git-files
**** gitconfig
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode
:config
(add-to-list 'auto-mode-alist '("/\\.gitconfig\\..*\\'" . gitconfig-mode)))
#+END_SRC
**** gitignore
Use this to get support for .gitignore-files
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode)
#+END_SRC
**** gitattributes
Edit gitattributes-files.
#+BEGIN_SRC emacs-lisp
(use-package gitattributes-mode)
#+END_SRC
*** diff-hl
Highlight differences with diff-hl, which works better than git-gutter.
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
:hook ((prog-mode vc-dir-mode) . diff-hl-mode))
#+END_SRC
*** Gist
Create and download gists from emacs.
#+BEGIN_SRC emacs-lisp
(use-package gh
  :pin melpa)
(use-package gist
  :pin melpa
  :config (setq gist-view-gist t)
  :bind (("C-x j" . gist-list)))
#+END_SRC
*** line-numbers
Use relative linenumbers.
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
:config
  (setq linum-relative-current-symbol ""))
#+END_SRC
Turn off line-numbers in minor mode.
#+BEGIN_SRC emacs-lisp
(use-package linum-off)
#+END_SRC
*** Indentation
Use aggressive mode for indentation. Use to be auto-indent, but aggressive seems better.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config (global-aggressive-indent-mode t))
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode t)
    (setq which-key-idle-delay 0.2))
#+END_SRC
*** Company
**** Company-mode
Complete anything
#+BEGIN_SRC emacs-lisp
(use-package company
:diminish
:config
  (global-company-mode t))
#+END_SRC
**** Company-shell
Add more functions to company
#+BEGIN_SRC emacs-lisp
  (use-package company-shell
    :config
    (add-to-list 'company-backends '(company-shell company-shell-env))
    (add-to-list 'company-shell-modes '(bat-mode powershell-mode)))
#+END_SRC
**** Company-keymapfix
A fix to enable [tab] to expand yasnippets etc in ~company-mode-map~.
From [[https://stackoverflow.com/questions/2087225/about-the-fix-for-the-interference-between-company-mode-and-yasnippet][StackOverflow]]. Another tip is in [[https://www.reddit.com/r/emacs/comments/5vhlws/using_tab_for_both_yasnippet_and_company][Reddit]] .
#+BEGIN_SRC emacs-lisp
  (defun company-yasnippet-or-completion ()
    (interactive)
    (let ((yas-fallback-behavior nil))
      (unless (yas-expand)
        (call-interactively #'company-complete-common))))

  (add-hook 'company-mode-hook (lambda ()
                                 (substitute-key-definition 'company-complete-common
                                                            'company-yasnippet-or-completion
                                                            company-active-map)))
#+END_SRC
*** Autohotkey-mode
#+BEGIN_SRC emacs-lisp
(use-package ahk-mode)
#+END_SRC
*** Switch-window
Use visual keys to switch windows.
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :bind
    (("C-M-z" . switch-window)
    ("C-x o" . switch-window)))
#+END_SRC
*** Buffer-move
To move buffers around
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind
    (("C-c C-x <up>" . buf-move-up)
    ("C-c C-x <down>" . buf-move-down)
    ("C-c C-x <left>" . buf-move-left)
    ("C-c C-x <right>" . buf-move-right)))
#+END_SRC
*** Pretty bullets
This was slow before, in emacs 25.1, but seems to work now in version 25.2.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** wiki-summary
Use wiki search from emacs
#+BEGIN_SRC emacs-lisp
(use-package wiki-summary)
#+END_SRC
*** Super-save
Save buffers when idle
#+BEGIN_SRC emacs-lisp
(use-package super-save
:diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  (setq super-save-idle-duration 20))
#+END_SRC
*** Yara-files
Mode that supports editing of Yara-files.
#+BEGIN_SRC emacs-lisp
(use-package yara-mode)
#+END_SRC
*** Window resize
#+BEGIN_SRC emacs-lisp
(use-package windresize)
#+END_SRC
*** Better shell
#+BEGIN_SRC emacs-lisp
(use-package better-shell
:ensure t
:bind (("C-'" . better-shell-shell)
("C-;" . better-shell-remote-open)))
#+END_SRC
*** Elastic search mode
#+BEGIN_SRC emacs-lisp
(use-package es-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.es$" . es-mode)))
#+END_SRC
*** Logstash-mode
Use logstash-mode for conf-files in logstash-directories.
#+BEGIN_SRC emacs-lisp
(use-package logstash-conf
:config
(add-to-list 'auto-mode-alist '("/logstash/.*\\.conf'" . logstash-conf-mode)))
#+END_SRC
*** Move text
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :config
  (move-text-default-bindings))
#+END_SRC
*** XKCD
#+BEGIN_SRC emacs-lisp
(use-package xkcd)
#+END_SRC
*** org2jekyll
To make it possible to write in org and publish as jekyll.
#+BEGIN_SRC emacs-lisp
(use-package org2jekyll)
#+END_SRC
*** Copy-as-format
Copy with formatting.
#+BEGIN_SRC emacs-lisp
(use-package copy-as-format
:bind
  ("C-c w g" . copy-as-format-github)
  ("C-c w j" . copy-as-format-jira)
  ("C-c w h" . copy-as-format-html)
  ("C-c w m" . copy-as-format-markdown)
  ("C-c w o" . copy-as-format-org-mode)
  ("C-c w w" . copy-as-format-mediawiki))
#+END_SRC
*** Cheatsheet
My own cheatsheet.
#+BEGIN_SRC emacs-lisp
(use-package cheatsheet
  :bind (("C-c s" . cheatsheet-show)
    :map cheatsheet-mode-map
    ("C-q" . kill-this-buffer))
  :config
  (load "my-cheats"))
#+END_SRC
*** Try
Use try to test packages.
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC
*** htmlize
Needed by org-babel-export
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC
*** hackernews
Read the heackernews in emacs.
#+BEGIN_SRC emacs-lisp
(use-package hackernews)
#+END_SRC
*** Twitter
Read tweets in emacs, turned out really easy to setup. The [[https://www.emacswiki.org/emacs/TwitteringMode][manual]]
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :config
    (setq twittering-use-master-password t)
    (setq twittering-private-info-file (concat my-emacs-dir ".twittering-mode.gpg")))
#+END_SRC
*** ini-mode
Windows ini-files.
#+BEGIN_SRC emacs-lisp
(use-package ini-mode)
#+END_SRC
*** ipcalc
IP subnet calculation. To use it, evaluate (ipcalc "10.0.0.0/8") for example.
#+BEGIN_SRC emacs-lisp
(use-package ipcalc
  :bind ("C-c i" . ipcalc))
#+END_SRC
*** Treemacs
Directory navigating explorer-style.
#+BEGIN_SRC emacs-lisp
(use-package treemacs
     :bind (("C-x t" . treemacs)
     :map treemacs-mode-map
     ("C-x t" . treemacs-toggle))
     :config
     (progn (setq treemacs-follow-after-init t
            treemacs-show-hidden-files t)
      (treemacs-follow-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'extended))
        (`(t . _)
         (treemacs-git-mode 'simple)))))
#+END_SRC
*** ztree
Cool directory package.
#+BEGIN_SRC emacs-lisp
(use-package ztree
  :bind ("C-x z" . ztree-dir)
  :config (setq-default ztree-dir-show-filtered-files t))
#+END_SRC
*** CSV
Read csv-files.
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC
*** Yasnippets
**** Hydra for yasnippet
From https://github.com/abo-abo/hydra/wiki/YASnippet
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-yasnippet (:color blue :hint nil)
    "
                  ^YASnippets^
    --------------------------------------------
      Modes:    Load/Visit:    Actions:

     _c_ompany-yas   _d_irectory    _i_nsert
     _g_lobal        _f_ile         _t_ryout
     _m_inor         _l_ist         _n_ew
     _e_xtra         _a_ll
    "
    ("c" company-yasnippet)
    ("d" yas-load-directory)
    ("e" yas-activate-extra-mode)
    ("i" yas-insert-snippet)
    ("f" yas-visit-snippet-file :color blue)
    ("n" yas-new-snippet)
    ("t" yas-tryout-snippet)
    ("l" yas-describe-tables)
    ("g" yas-global-mode)
    ("m" yas-minor-mode)
    ("a" yas-reload-all))
#+END_SRC
**** Yasnippet
Load yasnippet and some templates.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config 
    (yas-global-mode nil)
    (use-package yasnippet-snippets)
    :bind (("C-c y" . hydra-yasnippet/body)
           :map yas-minor-mode-map
           ("C-c i" . yas-expand)))
#+END_SRC
*** proportional
Use proportional fonts everywhere.
#+BEGIN_SRC emacs-lisp
(use-package proportional)
#+END_SRC
*** Docker file mode
Support Dockerfile.
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
#+END_SRC
*** Docker compose
Support Docker Compose files.
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode)
#+END_SRC
*** Verify-url
Check urls in an file.
#+BEGIN_SRC emacs-lisp
(use-package verify-url)
#+END_SRC
*** Rainbows
Use different colors for delimeters to increase readability.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
      :hook
      ((org-mode prog-mode) . rainbow-delimiters-mode))
#+END_SRC
*** Cheat.sh
Check out stuff on https://cheat.sh/
#+BEGIN_SRC emacs-lisp
(use-package cheat-sh)
#+END_SRC
*** Free keys
To list what keys are free in different modes. Very useful.
#+BEGIN_SRC emacs-lisp
(use-package free-keys)
#+END_SRC
*** Restclient
A client to make REST-calls from emacs.
#+BEGIN_SRC emacs-lisp
  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient)
    (use-package restclient)
    (use-package ob-restclient))
#+END_SRC
*** X509
Support for certificate files.
#+BEGIN_SRC emacs-lisp
(use-package x509-mode)
#+END_SRC
*** Smart parenthesis
Automatically insert parenthesis.
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish
  :hook 
  ((org-mode prog-mode) . smartparens-mode))
#+END_SRC
*** Undo-tree
Make undo more intitive.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish
    :config
    (global-undo-tree-mode))
#+END_SRC
*** Rocket-chat
Testing Rocket Chat
#+BEGIN_SRC emacs-lisp
  (use-package promise)
  (use-package async-await)
  (use-package rocket-chat
    :load-path "packages/rocket-chat"
    :requires promise async-await)
#+END_SRC
** Hydra config
Hydras is keyboard mapping through menus.
*** Hydra
#+BEGIN_SRC emacs-lisp
;; Hydra keymapping support
(use-package hydra)
#+END_SRC
*** Toggle stuff
Use "C-c v" to toggle values.
#+BEGIN_SRC emacs-lisp
(defhydra hydra-toggle (:color blue)
        "toggle"
        ("a" abbrev-mode "abbrev")
        ("b" describe-personal-keybindings "key-bindings")
        ("d" toggle-debug-on-error "debug")
        ("f" auto-fill-mode "fill")
        ("g" goto-line "goto-line")
        ("h" hackernews "Hackernews")
        ("k" kill-some-buffers "kill-some b")
        ("m" message-recover "message-recover")
        ("l" linum-mode "linum")
        ("p" package-list-packages "package-list")
        ("r" linum-relative-mode "linum-relative")
        ("R" rainbow-delimiters-mode "rainbow-delimiters")
        ("s" do-auto-save "auto-save")
        ("t" toggle-truncate-lines "truncate")
        ("v" windresize "windresize")
        ("w" whitespace-mode "whitespace")
        ("x" xkcd "xkcd")
        ("q" nil "cancel"))
     (bind-key "C-c v" 'hydra-toggle/body)
#+END_SRC
*** Zoom font
Use <F2> to zoom in or out of fonts
#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    ("<left>" windresize-left "left")
    ("<right>" windresize-right "right")
    ("<up>" windresize-up "up")
    ("<down>" windresize-down "down")
    ("SPC" nil)
    ("RET" nil))
 (setq text-scale-mode-step 1.1)
#+END_SRC
*** Font size changes
Change fonts with C-<f2>.
#+BEGIN_SRC emacs-lisp
(defhydra hydra-font (global-map "C-<f2>")
  "Change fonts to next/previous"
    ("n" my/cycle-font-next "next font")
    ("p" my/cycle-font-previous "out"))
#+END_SRC
*** Emacs init files.
Hydra for quick access to emacs files, "<f8> i".
#+BEGIN_SRC emacs-lisp
(defhydra hydra-config-files (:color blue)
  "Emacs config files"
    ("c" (find-file custom-file) "Customize")
    ("e" (find-file my/init-org-file) "emacs.org")
    ("i" (find-file user-init-file) "init.el")
    ("k" my/server-shutdown "Save&kill")
    ("r" (org-babel-load-file my/init-org-file) "Reload emacs")
    ("s" (find-file (expand-file-name "my-cheats.el" (concat my/init-dir "/lisp"))) "Cheat sheet")
    ("q" nil "cancel"))
(bind-key "<f8> i" 'hydra-config-files/body)
(defun my/server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )
#+END_SRC
*** Hydra for org
Switch between org-buffers, "<f8> o".
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-stuff (:color blue)
  "Org mode stuff"
    ("g" org-mobile-pull "Pull from mobile")
    ("p" org-mobile-push "Push to mobile")
    ("P" org-publish-project "org-publish-project")
    ("o" org-iswitchb "Switch org-buffer")
    ("q" nil "cancel"))
(bind-key "<f8> o" 'hydra-org-stuff/body)
#+END_SRC
*** Launcher
Launch various programs, "C-c b"
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-launcher (:color blue :hint nil)
    "
  _e_shell     _b_ettershell _s_hell     _p_owershell
  _c_heat.sh   _E_ww         _f_ree-keys ^ ^
  _r_eddit     emacs_w_iki   open-_g_it  _W_iki-summary
  "
    ("b" better-shell-for-current-dir)
    ("c" cheat-sh)
    ("e" eshell)
    ("E" eww)
    ("f" free-keys)
    ("g" (browse-url "https://git-scm.com/docs/"))
    ("h" man "man")
    ("p" (powershell))
    ("r" (browse-url "http://www.reddit.com/r/emacs/"))
    ("s" shell)
    ("w" (browse-url "http://www.emacswiki.org/"))
    ("W" wiki-summary)
    ("q" nil "quit"))
  (bind-key "C-c b" 'hydra-launcher/body)
#+END_SRC
*** Expand text
Expand text in org mode
;; From https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-template (:color blue :hint nil)
    "
 _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
 _l_atex   _E_xample   _p_owershell    _i_ndex:
 _a_scii   _v_erse     _S_hellsript    _I_NCLUDE:
 _s_rc     _n_ote      _P_erl tangled  _H_TML:
 _h_tml    _O_ptions   plant_u_ml      _A_SCII:
"
    ("s" (hot-expand "<s"))
    ("E" (hot-expand "<e"))
    ("q" (hot-expand "<q"))
    ("v" (hot-expand "<v"))
    ("n" (let (text) ; org-reveal speaker notes
           (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
             (delete-region (region-beginning) (region-end)))
           (insert "#+BEGIN_NOTES\n\n#+END_NOTES")
           (forward-line -1)
           (when text (insert text))))
    ("O" (let (text)
           (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
             (delete-region (region-beginning) (region-end)))
           (insert "#+BEGIN_OPTIONS\n\n#+END_OPTIONS")
           (forward-line -1)
           (when text (insert text))))
    ("c" (hot-expand "<c"))
    ("l" (hot-expand "<l"))
    ("h" (hot-expand "<h"))
    ("a" (hot-expand "<a"))
    ("L" (hot-expand "<L"))
    ("i" (hot-expand "<i"))
    ("e" (hot-expand "<s" "emacs-lisp"))
    ("p" (hot-expand "<s" "powershell"))
    ("S" (hot-expand "<s" "sh"))
    ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
    ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
    ("I" (hot-expand "<I"))
    ("H" (hot-expand "<H"))
    ("A" (hot-expand "<A"))
    ("<" self-insert-command "ins")
    ("o" nil "quit"))

(defun hot-expand (str &optional mod header)
    "Expand org template.

STR is a structure template string recognised by org like <s. MOD is a
string with additional parameters to add the begin line of the
structure element. HEADER string includes more parameters that are
prepended to the element after the #+HEADERS: tag."
    (let (text)
      (when (region-active-p)
        (setq text (buffer-substring (region-beginning) (region-end)))
        (delete-region (region-beginning) (region-end))
        (deactivate-mark))
      (when header (insert "#+HEADERS: " header))
      (insert str)
      (org-try-structure-completion)
      (when mod (insert mod) (forward-line))
      (when text (insert text))))

(define-key org-mode-map "<"
  (lambda () (interactive)
  (if (or (region-active-p) (looking-back "^"))
  (hydra-org-template/body)
  (self-insert-command 1))))

(bind-key "C-c o" 'hydra-org-template/body)
#+END_SRC
*** Move text
Use a hydra to move text. M-<up> or M-<down>.
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :config
  (defhydra hydra-move-text ()
    "Move text"
    ("u" move-text-up "up")
    ("d" move-text-down "down")))
#+END_SRC
* Private and local stuff
** Load private stuff
This load a local file with private info.
Must check for OS-version to find out where Dropbox is located.
Also must check for existing file, sometimes the system dont have Dropbox.
See also: http://dotemacs.de/multiemacs.html
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
 (setq my/dropbox-dir "~/Dropbox/"))
(if (eq system-type 'windows-nt)
  (setq my/dropbox-dir (concat (getenv "UserProfile") "\\Dropbox\\")))
(setq my-emacs-dir (concat my/dropbox-dir "emacs/"))
(if (file-exists-p (expand-file-name "private.org" my-emacs-dir))
 (org-babel-load-file (expand-file-name "private.org" my-emacs-dir)))
#+END_SRC
** Load secret stuff
Load secret stuff from this encrypted org-file.
*** EasyPG
Since we use "use-package" to load builtin function, add ":ensure nil".
#+BEGIN_SRC emacs-lisp
(use-package epa-file
  :ensure nil
  :config
  (setq epa-file-select-keys nil)
  (setq epa-file-encrypt-to "8A114B0F26AA73E8")
  (setq epa-file-cache-passphrase-for-symmetric-encryption t))
#+END_SRC
*** Org-crypt
enable encryption of org-files.
#+BEGIN_SRC emacs-lisp
(use-package org-crypt
  :ensure nil
  :config
  (org-crypt-use-before-save-magic)
  (setq org-crypt-tag-matcher "encrypt")
  (add-to-list 'org-tags-exclude-from-inheritance (quote "encrypt"))
  (add-to-list 'org-tags-exclude-from-inheritance (quote "crypt")))
#+END_SRC
*** Load secrets from this file
This part dont work yet.
#+BEGIN_SRC emacs-lisp
;;(if (file-exists-p (expand-file-name "secret.org.gpg" my-emacs-dir))
;; (org-babel-load-in-session-maybe (expand-file-name "secret.org.gpg" my-emacs-dir)))
#+END_SRC
*** Authinfo file
Define path for .authinfo-file
#+BEGIN_SRC emacs-lisp
(setq auth-source-debug t)
(setq auth-sources
    (concat my/dropbox-dir "emacs/.authinfo.gpg"))
#+END_SRC
** Custom file for customize
Use a separate file for emacs "customize".
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "customize.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+END_SRC
Use only "'" instead of "quotes" for customize.
#+BEGIN_SRC emacs-lisp
(advice-add 'custom-save-all :around
            (lambda (orig)
              (let ((print-quoted t))
                (funcall orig))))
#+END_SRC
** Lisp
My own Lisp-files
#+BEGIN_SRC emacs-lisp
;; Local lisp-directory
(when (not (file-exists-p "lisp"))
      (make-directory (concat user-emacs-directory "lisp") t))
(add-to-list 'load-path (concat user-emacs-directory "lisp"))
#+END_SRC
* Tuning
** Garbage collection
Tries to change the variable dynamic.
From https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
#+BEGIN_SRC emacs-lisp
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold (* 500 1024 1024)))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold (* 100 1024 1024)))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+END_SRC
** File encoding settings
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment   'utf-8)
(setq buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; MS Windows clipboard is UTF-16LE
(when (eq system-type 'windows-nt)
  (set-clipboard-coding-system 'utf-16le-dos))
#+END_SRC
** Sentence
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
* Keyboard settings
** Windows keys (W32)
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
     (w32-register-hot-key [M-tab])
     (setq w32-capslock-is-shiftlock nil)
     (setq w32-enable-caps-lock nil))
#+END_SRC
** Set-mark for lxss
Set mark-command for Windows env
#+BEGIN_SRC emacs-lisp
(bind-key "M-SPC" 'set-mark-command)
#+END_SRC
** Buffer Selection
#+BEGIN_SRC emacs-lisp
(use-package bs
:ensure nil
:config
(bind-key "C-x C-b" 'bs-show))
#+END_SRC
** ivy, swiper and counsel
These are really useful packages. http://oremacs.com/swiper/
Replaced IDO with Ivy.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1)
    (setq	ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) ")
    :bind
    ("C-x C-f" . counsel-find-file)
    ("C-c C-r" . counsel-recentf)
    ("C-s" . swiper)
    ("C-r" . swiper))
  (use-package swiper
    :config
    (setq ivy-use-selectable-prompt t))
  (use-package counsel
    :diminish
    :config
    (counsel-mode 1)
    (use-package smex
      :config
      (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory)))
    :bind
    ("M-x" . counsel-M-x))
  (use-package ivy-hydra)
#+END_SRC
** Windmove
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
(windmove-default-keybindings))
#+END_SRC
*** Orgmode customizations
Make windmove work in org-mode:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
(setq org-support-shift-select t)
#+END_SRC
** Own stuff
*** Toggle truncate lines
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines nil)
(setq truncate-partial-width-windows 40)
(bind-key "C-c t" 'toggle-truncate-lines)
#+END_SRC
*** Wrap long lines
Visual-line-mode affects the variable word-wrap (toggle-word-wrap).
#+BEGIN_SRC emacs-lisp
(set-default 'word-wrap t)
(setq-default visual-line-mode t)
#+END_SRC
*** No case-sensitive for search
#+BEGIN_SRC emacs-lisp
(setq-default case-fold-search t)
#+END_SRC
*** Turn off case sensitivity för buffers
#+BEGIN_SRC emacs-lisp
(setq read-buffer-completion-ignore-case t)
#+END_SRC

#+RESULTS:
: t

* Theme and settings
** Theme
*** Load themes
#+BEGIN_SRC emacs-lisp
(defun my/load-themes ()
 "Loads my themes if in windows"

  (use-package afternoon-theme)
  (load-theme 'afternoon t t)

  (use-package base16-theme)
  (load-theme 'base16 t t)

  (use-package inkpot-theme)
  (load-theme 'inkpot t t)

  (use-package material-theme)
  (load-theme 'material t t)

  (use-package twilight-bright-theme)
  (load-theme 'twilight-bright t t)

  (use-package zenburn-theme)
  (load-theme 'zenburn t t)

  (use-package org-beautify-theme
    :pin melpa
    :disabled
    :config
    (load-theme 'org-beautify t t))

  (load-theme 'material))
#+END_SRC

#+RESULTS:
: my/load-themes

***  Load different theme if in gui or terminal
#+BEGIN_SRC emacs-lisp
(unless (not (display-graphic-p))
(load-theme 'tango-dark)
(my/load-themes))
#+END_SRC
*** Theme when emacs run as daemon.
This loads theme when emacs starts up as a daemon
#+BEGIN_SRC emacs-lisp
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (my/load-themes)))
#+END_SRC
*** Theme-chooser
Switch betweens selected themes with "C-<".
#+BEGIN_SRC emacs-lisp
(use-package theme-looper
  :config
  (theme-looper-set-theme-set '(afternoon inkpot twilight-bright tango-dark zenburn material))
  :bind
  ("C-<" . theme-looper-enable-next-theme)
  ("C->" . theme-looper-enable-random-theme))
#+END_SRC
** Fonts
Use Source Code Pro as font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                        :family "Source Code Pro"
                        :height 100
                        :weight 'normal
                        :width  'condensed)
(setq default-frame-alist '((font . "Source Code Pro-10")))
#+END_SRC
*** Cycle through fonts
From Xah [[http://www.wilkesley.org/~ian/xah/emacs/emacs_switching_fonts.html][Xah Lee switch fonts]]
#+BEGIN_SRC emacs-lisp
(defcustom my/font-list nil "A list of fonts for `my/cycle-font' to cycle from." :group 'font)
(set-default 'my/font-list
             (cond
              ((string-equal system-type "windows-nt")
               '(
                 "Source Sans Pro-12"
                 "Source Code Pro-10"
                 "Inconsolata-10"
                 "Courier New-10"
                 "DejaVu Sans Mono-9"
                 "Lucida Console-10"
                 "Segoe UI Symbol-10"
                 "Lucida Sans Unicode-10"
                 ))
              ((string-equal system-type "gnu/linux")
               '(
                 "DejaVu Sans Mono-9"
                 "DejaVu Sans-9"
                 ))))

(defun my/cycle-font (*n)
  "Change font in current frame.
Each time this is called, font cycles thru a predefined list of fonts in the variable `my/font-list'."
  (interactive "p")
  ;; this function sets a property “state”. It is a integer. Possible values are any index to the fontList.
  (let (-fontToUse -stateBefore -stateAfter )
    (setq -stateBefore (if (get 'my/cycle-font 'state) (get 'my/cycle-font 'state) 0))
    (setq -stateAfter (% (+ -stateBefore (length my/font-list) *n) (length my/font-list)))
    (setq -fontToUse (nth -stateAfter my/font-list))
    (set-frame-font -fontToUse t)
    (message "Current font is: %s" -fontToUse )
    (put 'my/cycle-font 'state -stateAfter)))

(defun my/cycle-font-next ()
  "Switch to the next font, in current window.
See `my/cycle-font'."
  (interactive)
  (my/cycle-font 1))

(defun my/cycle-font-previous ()
  "Switch to the previous font, in current window.
See `my/cycle-font'."
  (interactive)
  (my/cycle-font -1))
#+END_SRC
** Startup settings
Things that we dont want during or after startup
#+BEGIN_SRC emacs-lisp
;; Startup settings
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      initial-scratch-message nil
      initial-major-mode 'org-mode)

;; No menubar, toolbar or scrollbar
(defun my/no-toolbars ()
  "Dont load toolbars or menubars, if in gui-mode"
  (when (display-graphic-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (set-scroll-bar-mode nil)))
  
;; Load this when started as server (daemon)
(add-hook 'after-make-frame-functions
  (lambda (frame)
  (select-frame frame)
  (my/no-toolbars)))

;; Don't display toolbars when in gui-mode
(when (display-graphic-p)
  (my/no-toolbars))
#+END_SRC
** Powerline-mode
Use powerline in the message bar.
#+BEGIN_SRC emacs-lisp
(use-package powerline)
(powerline-default-theme)
#+END_SRC
** Customisations
*** Initial settings
#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'text-mode)
  (line-number-mode t)
  (column-number-mode t)
  (transient-mark-mode t)
  (show-paren-mode t)
  (setq-default line-spacing 1)
  (setq-default show-trailing-whitespace nil)
  (setq-default indicate-empty-lines t)
  (setq apropos-do-all t)
#+END_SRC
*** Indents and tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default tab-always-indent 'complete)      ;;Use tabs as indents, 2ch width
#+END_SRC
*** Newline settings
#+BEGIN_SRC emacs-lisp
(setq mode-require-final-newline t)
(setq next-line-add-newlines nil)
(setq require-final-newline t)
#+END_SRC
*** Global highlight mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode nil)
#+END_SRC

#+RESULTS:
: t
*** Recent files
Record old openen files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key (kbd "C-c C-r") 'recentf-open-files)
#+END_SRC
*** Reverting
Map <F5> to revert-buffer. But only revert if the file is not modified.
#+BEGIN_SRC emacs-lisp
(global-set-key
  (kbd "<f5>")
  (lambda (&optional force-reverting)
  "Interactive call to revert-buffer. Ignoring the auto-save
  file and not requesting for confirmation. When the current buffer
  is modified, the command refuses to revert it, unless you specify
  the optional argument: force-reverting to true."
  (interactive "P")
  ;;(message "force-reverting value is %s" force-reverting)
  (if (or force-reverting (not (buffer-modified-p)))
  (revert-buffer :ignore-auto :noconfirm)
  (error "The buffer has been modified"))))
#+END_SRC
*** Bookmarks
Save bookmarks all the time.
#+BEGIN_SRC emacs-lisp
(setq bookmark-save-flag t)
(setq bookmark-version-control t)
(setq bookmark-default-file (concat my/dropbox-dir "emacs/bookmarks"))
#+END_SRC
*** Language
Spellchecking. I use Hunspell.
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure nil
  :config
  (progn
    (add-to-list 'ispell-local-dictionary-alist '("swedish-hunspell"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "sv_SE"); Dictionary file name
                                              nil
                                              iso-8859-1))

    (add-to-list 'ispell-local-dictionary-alist '("english-hunspell"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "en_US")
                                              nil
                                              iso-8859-1))
  (setq ispell-program-name "hunspell"
        ispell-dictionary "swedish-hunspell")))
#+END_SRC
*** Dired customizations
Use dired+ to not generate more buffers.
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :load-path "lisp"
    :config
    (diredp-toggle-find-file-reuse-dir 1))
#+END_SRC
*** No beeps
#+BEGIN_SRC emacs-lisp
;;No beep
(setq visible-bell t)
#+END_SRC
*** Buffer setup
Unique buffernames with uniquify.
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'forward))
#+END_SRC
*** javascript
Add proxy .pac-files to javascript-mode.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pac\\'" . javascript-mode))
(add-to-list 'auto-mode-alist '("wpad\\.dat\\'" . javascript-mode))
#+END_SRC
*** Time
Display time as 24-hour format
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
#+END_SRC
** Change yes-or-no to y-n
#+BEGIN_SRC emacs-lisp
;; Press y or n for yes or no
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Eshell
Use axtended shell.
#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "cat")
(bind-key "C-c RET" 'eshell)
#+END_SRC
Use eshell built in functions for sudo. See [[https://emacs.stackexchange.com/questions/5608/how-to-let-eshell-remember-sudo-password-for-two-minutes][this discussion]] for details.
#+BEGIN_SRC emacs-lisp
(require 'em-tramp) ; to load eshell’s sudo
  (require 'password-cache) ;Load password-cache
  (setq eshell-prefer-lisp-functions t)
  (setq eshell-prefer-lisp-variables t)
  (setq password-cache t) ; enable password caching
  (setq password-cache-expiry 3600) ; for one hour (time in secs)
#+END_SRC
** TRAMP
Use fakecygpty to login from Windows using openssh. See https://www.emacswiki.org/emacs/SshWithNTEmacs and https://github.com/d5884/fakecygpty.
You must compile fakecygpty from *Cygwin*. Won't work in MSYS2, MINGW32/64. Copy ~fakecygpty.exe~ to ~f_ssh.exe~ and ~f_scp.exe~.
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(require 'fakecygpty)
(when (eq system-type 'windows-nt)
  (eval-after-load "tramp"
    '(progn
      (fakecygpty-activate)
       (add-to-list 'tramp-methods
                    (mapcar
                     (lambda (x)
                       (cond
                       ((equal x "sshx") "cygssh")
                        ((eq (car x) 'tramp-login-program) (list 'tramp-login-program "f_ssh"))
                        (t x)))
                     (assoc "sshx" tramp-methods)))
       (setq tramp-default-method "cygssh"))))
#+END_SRC
* Backup
Backup and autosave options, + history
** Backup of files
Saves backup of files in emacs-homedir. Keeps several versions of the files.
#+BEGIN_SRC emacs-lisp
;; From https://github.com/magnars/.emacs.d
;; Write backup files to own directory
(defconst my/emacs-backup-dir
        (expand-file-name (concat user-emacs-directory "backups/")))
(setq backup-directory-alist
      `((".*" . ,my/emacs-backup-dir)))

;; Make backups of files, even when they're in version control
(setq
        delete-old-versions t
        version-control t
        vc-make-backup-files t
        backup-by-copying t
        kept-old-versions 10
        kept-new-versions 20
        auto-save-interval 50)
#+END_SRC
** Save current position
Go back to where you last were in the file.
#+BEGIN_SRC emacs-lisp
;; Save point position between sessions
(use-package saveplace
:config
(setq-default save-place t)
(save-place-mode 1)
(setq save-place-file (expand-file-name ".places" user-emacs-directory)))
#+END_SRC
** Save history
Save a history of edited files.
#+BEGIN_SRC emacs-lisp
;; Save history of files
(setq savehist-file (expand-file-name ".savehist" user-emacs-directory))
(savehist-mode 1)
(setq
  history-length t
  history-delete-duplicates t
  savehist-save-minibuffer-history 1
  savehist-additional-variables
    '(kill-ring
    search-ring
    regexp-search-ring))
#+END_SRC

* Org-mode stuff
Read [[https://orgmode.org/worg/org-configs/org-customization-guide.html][Org Beginners Customization Guide]] for info about this.
** Org-mode variables
*** File-variables
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
(setq my/repo-dir "~/repos/"))
(if (eq system-type 'windows-nt)
  (setq my/repo-dir (concat (getenv "UserProfile") "\\Repos\\")))
#+END_SRC
*** Other variables
Customize org-mode settings.
#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts '{})
  (setq org-export-with-sub-superscripts '{})
  (setq org-export-coding-system 'utf-8)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-scheduled-if-deadline-is-shown "repeated-after-deadline")
  (setq org-agenda-include-diary nil)
  (setq org-agenda-span 14)
  (setq org-log-done 'time)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-log-refile 'time)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 4))))
  (setq org-log-into-drawer t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-enforce-todo-dependencies t)
  (setq org-agenda-dim-blocked-tasks t)
#+END_SRC
** Org-files
My org-files for Todo-list and agenda.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
(setq org-directory (concat my/dropbox-dir "emacs/org/"))
(setq org-agenda-files (list org-directory))
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file (concat org-directory "notes.org"))
(defvar my/notes-file (concat org-directory "notes.org"))
(defvar my/diary-file (concat org-directory "diary.org"))
#+END_SRC
*** Org Archiving
Separate file for archiving stuff. Use datetree syntax.
#+BEGIN_SRC emacs-lisp
(setq my/org-archive-file (expand-file-name "archive/archive.org" org-directory))
(when (not (file-exists-p (file-name-directory my/org-archive-file)))
      (make-directory (file-name-directory my/org-archive-file) t))
(setq org-archive-location (concat my/org-archive-file "::datetree/* From %s"))
#+END_SRC
*** Org custom agenda
For more info about this, see [[http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][Org Agenda Custom Commands]].
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
           '(("c" "Weekly schedule" agenda ""
              ((org-agenda-span 7)
               (org-agenda-repeating-timestamp-show-all t)
               (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))

             ("d" "Upcoming deadlines" agenda ""
              ((org-agenda-entry-types '(:deadline))
               (org-agenda-span 7)
               (org-deadline-warning-days 60)
               (org-agenda-time-grid nil)))

           ("h" . "Hemma|Huset")
             ("hh" "Agenda and Home-related tasks" tags-todo "Hemma|Huset"
              ((agenda "")
               (org-agenda-sorting-strategy '(priority-up effort-down))))
             ("hc" "Todo" tags-todo "Cyklar"
              ((agenda "")
              (todo "TODO|IN-PROGRESS")
               (org-agenda-sorting-strategy '(priority-up effort-down))))
             ("hf" "Todo" tags-todo "Fordon"
              ((agenda "")
               (todo "TODO|IN-PROGRESS")
               (org-agenda-sorting-strategy '(priority-up effort-down))))
             ("hu" "Todo" tags-todo "Huset"
              ((agenda "")
               (todo "TODO|IN-PROGRESS")
               (org-agenda-sorting-strategy '(priority-up effort-down))))

             ("o" "Agenda and Office-related tasks" tags-todo "work|office"
               (org-agenda-ndays 7)
              ((agenda "")
               (todo "TODO|IN-PROGRESS")
               (org-agenda-sorting-strategy '(priority-up effort-down))))

             ("p" . "Priorities")
             ("pa" "A items" tags-todo "+Priority=\"A\"")
             ("pb" "B items" tags-todo "+Priority=\"B\"")
             ("pc" "C items" tags-todo "+Priority=\"C\"")
             ))
#+END_SRC
** Org-templates
A few templates to speed up capture.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
    `(("t" "To do items" entry (file+headline my/notes-file "To Do Items")
       "* TODO %?\n%T" :prepend t)

      ;; Multiline for blog-notes
      ("b" "Blog idea")
      ("be" "Emacs idea" entry (file+headline my/notes-file "Emacs")
       "* %?\n%T" :prepend t)
      ("bb" "Blog idea" entry (file+headline my/notes-file "Blog Topics")
       "* %?\n%T" :prepend t)

      ;;Links
      ("l" "Link" entry (file+headline my/notes-file "Links")
       "* %? %^L %^g \n%T" :prepend t)

      ;; Notes
      ("n" "Note" entry (file+headline my/notes-file "Notes")
       "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)

      ;; Journal
      ("j" "Journal" entry (file+olp+datetree my/diary-file)
       "* %?\n%U\n" :clock-in t :clock-resume t)

      ;; Multiline for watching stuff
      ("f" "Filmtips")
      ("fm" "Movies" entry (file+headline my/notes-file "Film")
       "* %^{Titel} :Film:\nAdded on %T\n%?" :prepend t)
      ("ft" "Video" entry (file+headline my/notes-file "Video")
       "* %^{Titel} :Video:Info:\nAdded on %T\n%^L\n%?" :prepend t)

      ;; Notes for code
      ("c" "Coding stuff")
      ("cc" "note with code" entry (file+headline my/notes-file "Code")
       "* %? \n#+BEGIN_SRC %^{Language?|emacs-lisp|sh|powershell|bat|html}\n%^C\n#+END_SRC\n")
      ("cs" "note with code, source" entry (file+headline my/notes-file "Code")
       "* %? \n#+BEGIN_SRC %^{Language?|emacs-lisp|sh|powershell|bat|html}\n%^C\n#+END_SRC\n%a\n")
      ))
#+END_SRC
** Localized calender
Use swedish calendar, from [[http://bigwalter.net/daniel/elisp/sv-kalender.el][Sv-kalender]]
#+BEGIN_SRC emacs-lisp
(load "sv-kalender" noerror)
#+END_SRC
** Org-Mobile
This copys files to Dropbox dir where the MobileOrg app can read/write data.
#+BEGIN_SRC emacs-lisp
  (use-package org-mobile
    :ensure nil
    :init
    (autoload 'org-mobile-pull "org-mobile" nil t)
    (autoload 'org-mobile-push "org-mobile" nil t)
    :config
    (setq org-mobile-directory (concat my/dropbox-dir "Appar/MobileOrg/"))
    (setq org-mobile-inbox-for-pull (concat my/dropbox-dir "emacs/org/sync.org"))
    (setq org-mobile-files (org-agenda-files))
    (setq org-mobile-agendas 'all)
    (setq org-mobile-force-id-on-agenda-items nil))
#+END_SRC
A simple setup [[https://nakkaya.com/2010/03/19/org-mode-in-your-pocket-setting-up-mobileorg/][here]]
** Org-projects
Publish my org-files to html-dir. [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Org-publish tutorial]]
Use backtick "`" and comma "," to use variable-expansion in the alist. See [[https://stackoverflow.com/questions/33353159/use-a-variable-to-define-an-optional-argument][StackoverFlow]]
#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
(setq org-publish-project-alist
`(("org" :components ("org-notes" "org-static"))
("org-notes"
:base-directory ,org-directory
:base-extension "org"
:publishing-directory ,(concat my/dropbox-dir "emacs/html")
:recursive t
:publishing-function org-html-publish-to-html
:headline-levels 4
:auto-preamble t
)
("org-static"
 :base-directory ,org-directory
 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
 :publishing-directory ,(concat my/dropbox-dir "emacs/html")
 :recursive t
 :publishing-function org-publish-attachment
 )
("OL-event"
:base-directory ,(concat my/repo-dir "OL-Event/")
:base-extension "org"
:publishing-directory ,(concat my/repo-dir "OL-Event/")
:publishing-function org-gfm-export-to-markdown
:recursive t
)
("Link-collection"
:base-directory ,(concat my/repo-dir "link-collection/")
:base-extension "org"
:publishing-directory ,(concat my/repo-dir "link-collection/")
:publishing-function org-html-publish-to-html
:recursive nil
)))
#+END_SRC
* Links
** Manuals
+ http://orgmode.org/manual/ Org mode manual
+ https://www.emacswiki.org/emacs/LoadPath
+ https://www.gnu.org/software/emacs/manual/html_node/
*** Magit manual
+ https://www.emacswiki.org/emacs/Magit
+ https://magit.vc/manual/magit/Getting-started.html
*** Use-package
+ https://github.com/jwiegley/use-package
** Generell info
+ http://dotemacs.de/
+ http://ergoemacs.org/
+ http://pragmaticemacs.com/
+ http://endlessparentheses.com/
** Böcker
- [[https://www.masteringemacs.org/][Mastering emacs]]
** Examples
+ https://github.com/eschulte/emacs24-starter-kit.
+ https://github.com/credmp/emacs-config 
+ https://gitlab.com/buildfunthings/emacs-config.
+ https://github.com/magnars/.emacs.d
+ https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
+ http://pages.sachachua.com/.emacs.d/Sacha.html#org8fde6ab
+ https://coldnew.github.io/coldnew-emacs/init.el.html
+ http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html
+ http://ergoemacs.org/emacs/emacs_installing_packages.html
+ https://github.com/howardabrams/dot-files/blob/master/emacs.org
+ http://whattheemacsd.com/
+ https://github.com/technomancy/better-defaults
+ http://wenshanren.org/?p=334 Org-mode example
+ https://ogbe.net/emacsconfig.html Another emacs org-mode example
+ http://dotemacs.de/multiemacs.html How to separate config on different systems
+ https://www.emacswiki.org/emacs/RobertAdesamConfig
+ [[https://caolan.org/dotfiles/emacs.html]]
+ https://mrblog.nl/emacs/config.html
+ http://bnbeckwith.com/bnb-emacs/
** Information
+ https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
+ http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
** Performance
+ https://emacs.stackexchange.com/questions/2286/what-can-i-do-to-speed-up-my-start-up
** Videos
+ https://youtu.be/I28jFkpN5Zk
  
* The end
Just record a last message, to know that the whole file has been loaded.
#+BEGIN_SRC emacs-lisp
(message "*** This is the last line of the config. Startup time=%s ***" (emacs-init-time))
#+END_SRC
